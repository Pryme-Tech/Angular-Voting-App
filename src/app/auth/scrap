import { Component, OnInit, AfterViewInit } from '@angular/core';
import {FormBuilder,FormControl,FormGroup, Validators} from '@angular/forms';
import { HttpClient,HttpHeaders } from '@angular/common/http';

import routes from '../../assets/routes/routes.json';
import { ActivatedRoute, Router } from '@angular/router';

@Component({
  selector: 'app-auth',
  templateUrl: './auth.component.html',
  styleUrls: ['./auth.component.scss']
})
export class AuthComponent implements OnInit {

  port = routes.host

  mustmatch(password:string,confirmpassword:string){

    // registration password and confirm password matching function

    return(fg:FormGroup)=>{
      const control = fg.controls[password]
      const match = fg.controls[confirmpassword]

      if(match.errors && !match.errors['mustmatch']){
        return
      }

      if(control.value !== match.value) {
        match.setErrors({mustmatch:true})
      }

      else{
        match.setErrors(null)
      }
      
    }
  }

// registration form inputs
registerForms:any

// check if forms are submitted
submitted = false

// get registration form input controls i.e validators included
get registerFormsControls(){
  return this.registerForms.controls
}

// Function to  send registration form inputs
registerFormsOnSubmit(){

  // set submitted to true
  this.submitted = true

  // return sending of registration form if form is invalid
  if(this.registerForms.invalid) return

  // N/A
let user_id = this.registerForms.getRawValue().username

// HTTP transport of registration form inputs
this.http.post(`${this.port}users/register`,this.registerForms.getRawValue()).subscribe(
  res=>{
    // console.log(res)

    let result = JSON.parse(JSON.stringify(res))

    this.verify.push({
      email : result.email,
      username : result.username,
      msg : result.msg,
      resend : "resend email"
    })

  },
  err=>{
    // console.log(err)
    this.errMsg = err.error

    setTimeout(()=>{
      this.errMsg=''
    },2000)

  })
}

//login form input fieds
loginForms = new FormGroup({
username: new FormControl('',Validators.required),
password: new FormControl('',Validators.required)
})

// get registration form input controls i.e validators included
get loginFormsControls(){
  return this.loginForms.controls
}

// login and register error and success messages
errMsg = ''
sucMsg :any = ''

// Acount verification data
verify:any = []

// http headers sent
private httpoptions={
    headers: new HttpHeaders({
      'Content-Type': 'application/x-www-form-urlencoded'
    })
  }



// Function to  send login form inputs
loginFormsOnSubmit(){
  
  // set submitted to true
  this.submitted = true

  // return sending of login form if form is invalid
  if(this.loginForms.invalid) return

  // HTTP transport of registration form inputs
this.http.post(`${this.port}users/login`,this.loginForms.getRawValue()).subscribe(
  res=>{

    // console.log(res)

    const auth = JSON.parse(JSON.stringify(res))

    !auth.Verified && this.verify.push({
        email : auth.email,
        username : auth.username,
        msg : auth.msg,
        resend : "resend email"
      })


      this.sucMsg = auth.status === true && "Login Successful" 

      auth.Verified && setTimeout(()=>{
        this.sucMsg=''
        localStorage.setItem('user_id',auth.username)
        window.location.replace('/admin')
      },2000)
     
  },
  err=>{
    // console.log(err)
    this.errMsg = err.error.statusMsg || err.error

    setTimeout(()=>{
      this.errMsg=''
    },2000)
    
  })
}

resend(email:any,username:any){

  this.verify[0].resend="........."

  // console.log(username,' ',email)

  setTimeout(()=>{
  this.http.get(`${this.port}users/verify/resend/${email}/${username}`).subscribe(
    res=>{
      // console.log(res)
      let result = JSON.parse(JSON.stringify(res))
      this.verify[0].resend = result.msg
    }
  )

},2000)

}

verifiedAccount:any

verifiedAccountError = false

hosted = routes.front

/*
This below before the constructor deals with the forget password
*/

forgetPasswordInput  = new FormControl('')

forgetPasswordForm:any

get forgetPasswordControls(){
  return this.forgetPasswordForm.controls
}

forgetPasswordFormSubmit(){

  this.submitted = true

  if(this.forgetPasswordForm.invalid) return

  console.log(this.forgetPasswordForm.getRawValue())

  this.http.post(`${this.port}users/forgetPassword`,this.forgetPasswordForm.getRawValue()).subscribe(
    res=>{
   console.log(res)

   let i = 3

   let int = setInterval(()=>{

    this.sucMsg = res + "  redirecting in... " + i

    if(i===0){
      //
      clearInterval(int)
      location.replace('/admin/auth/login')
    }

   i = i-1

   },1000)

  //  setTimeout(()=>{
  //   // this.sucMsg = ''
  //   // location.replace('/admin/auth/login')
  // },1500)

    },
    err=>{
      console.log(err)
    }
  )

}

  forgetPassword(){
    // console.log(this.forgetPasswordInput.value)

    this.http.get(`${this.port}users/forgetPassword/generateToken/${this.forgetPasswordInput.value}`).subscribe(
      res=>{
        console.log(res)

        let forgetPasswordRequestMessage = document.getElementById("forgetPasswordRequestMessage") as HTMLElement
        let input = document.querySelector("#forgetPassword input") as HTMLElement
        let label = document.querySelector("#forgetPassword label") as HTMLElement
        let p = document.querySelector("#forgetPassword p") as HTMLElement

        forgetPasswordRequestMessage.classList.remove("hidden")

        input.classList.add("hidden")

        label.classList.add('hidden')

        p.classList.add('hidden')

      },
      err=>{
        console.log(err)

        let forgetPasswordRequestMessageError = document.getElementById("forgetPasswordRequestMessageError") as HTMLElement
        let input = document.querySelector("#forgetPassword input") as HTMLElement
        let label = document.querySelector("#forgetPassword label") as HTMLElement
        let p = document.querySelector("#forgetPassword p") as HTMLElement

        forgetPasswordRequestMessageError.classList.remove("hidden")

        input.classList.add("hidden")

        label.classList.add('hidden')

        p.classList.add('hidden')

      })

  }

  forgetPasswordToken:any

  constructor(private http:HttpClient, private fb: FormBuilder, private route: ActivatedRoute, private router: Router) { 

    // alert(this.route.snapshot.paramMap.get('login'))

    let verify = document.getElementById('verify') as HTMLElement;

    if(location.href.startsWith(`${this.hosted}admin/auth/verifyuser`)){

    let token = this.route.snapshot.paramMap.get('token')

    this.http.get(`${this.port}users/verifyuser/${token}`).subscribe(
      res=>{
        // console.log(res)
        let result = JSON.parse(JSON.stringify(res))
        // this.verifiedAccount = result.msg
        this.verifiedAccount = [{
          user : result.user
        }]
      },
      err=>{
        console.log(err)
  
        this.verifiedAccountError = true

      }
    )

    }

    if(location.href.startsWith(`${this.hosted}admin/auth/forgetPassword/r`)){

    let token = this.route.snapshot.paramMap.get('token')

    this.http.get(`${this.port}users/forgetPassword/${token}`).subscribe(
      res=>{
        console.log(res)
        let result = JSON.parse(JSON.stringify(res))
        localStorage.setItem("forgetPasswordRequestUser",result.user)
        this.forgetPasswordToken = true
      },
      err=>{
        console.log(err)
        this.forgetPasswordToken = false
      }
      )

    this.forgetPasswordForm = this.fb.group({
      token : [token],
      user : [ localStorage.getItem("forgetPasswordRequestUser") ],
      password : ['',Validators.required],
      confirmPassword : ['',Validators.required]
    },  
    {
      validators: [this.mustmatch('password','confirmPassword')]
      }
    )

    // console.log(token)

    }

    this.registerForms = this.fb.group({
      email : ['',[Validators.required,Validators.email]],
      username : ['',Validators.required],
      password : ['',Validators.required],
      confirmpassword : ['',Validators.required]
    },
    {
      validators: [this.mustmatch('password','confirmpassword')]
      }
    )

    if(localStorage.getItem("user_id")){
      location.replace('/admin/votings')
    }

  }

  ngOnInit(): void {
  }

  ngAfterViewInit(){

    let register = document.getElementById('register') as HTMLElement;

    let signin = document.getElementById('signin') as HTMLElement;

    let changeToSignIn = document.getElementById('changeToSignIn') as HTMLElement;

    let changeToRegister = document.getElementById('changeToRegister') as HTMLElement;

    let forgetPassword = document.getElementById('forgetPassword') as HTMLElement

    let forgetPasswordForm = document.getElementById('forgetPasswordForm') as HTMLElement

    if(location.href===`${this.hosted}admin/auth/login`){
      register.classList.add('hidden')
      register.classList.remove('flex')
      signin.classList.remove('hidden')
      signin.classList.add('flex')
    }

    if(location.href===`${this.hosted}admin/auth/register`){
      register.classList.remove('hidden')
      register.classList.add('flex')
      signin.classList.add('hidden')
      signin.classList.remove('flex')
    }

    if(location.href===`${this.hosted}admin/auth/forgetPassword`){
      forgetPassword.classList.remove('hidden')
      // forgetPassword.classList.add('')
      // signin.classList.add('hidden')
      // signin.classList.remove('flex')
    }

    // if(location.href.startsWith(`${this.hosted}admin/auth/forgetPassword/r`) && this.forgetPasswordToken ){
    //   forgetPasswordForm.classList.remove('hidden')
    // }

    if(location.href===`${this.hosted}admin/auth`){
      this.router.navigate(['/admin/auth/login'])
    }
    
     changeToSignIn.addEventListener('click',async()=>{
     this.router.navigate(['/admin/auth/login'])
     })

     changeToRegister.addEventListener('click',async()=>{
      this.router.navigate(['/admin/auth/register'])
     })
  //   //document.querySelector('body').style.backgroundColor='red';
  }

}


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>


<div class="hidden" id="register" style="height: 100vh; justify-content: center; align-items: center;">


<!-- <div class="sec" style="height: 10vh; width: 100%;"></div> -->

  <form [formGroup]="registerForms" (ngSubmit)="registerFormsOnSubmit()" style=" background-image:  url(assets/bg.png); background-size: contain; background-color: white; background-repeat: no-repeat; background-position: center; height: inherit; width: 100%; ">

    <div style="background-color: #0080802e; margin: 0; width: 100vw !important; height: 100%; display: flex; justify-content: center; align-items: center; flex-direction: column;">

    <h1 class="py-3 font-weight-bold " style=" text-decoration: underline; " > Register </h1>
<!-- 
    <div *ngIf="errMsg" class="bg-danger text-center p-2 my-2 rounded" style="width: 60%;">
{{errMsg}}
  </div> -->

  <div class="form-group" style="width: 60%;">

      <label> Email: </label>

      <small class="text-danger font-weight-bold" *ngIf="submitted && this.registerFormsControls['email'].errors?.['required']" > *** Email field is required *** </small>
      <small class="text-danger font-weight-bold" *ngIf="submitted && this.registerFormsControls['email'].errors?.['email']" > *** Please enter a valid email *** </small>

    <input class="form-control" type="text" placeholder="email" formControlName="email" >
  </div>

    <div class="form-group" style="width: 60%;">
      <label> UserName: </label>

      <small class="text-danger font-weight-bold" *ngIf="submitted && this.registerFormsControls['username'].errors?.['required']" > *** Username field is required *** </small>

    <input class="form-control" type="text" placeholder="username" formControlName="username">
  </div>

  <div class="form-group mt-4" style="width: 60%;">
    <label> Password: </label>

    <small class="text-danger font-weight-bold" *ngIf="submitted && this.registerFormsControls['password'].errors?.['required']" > *** Password field is required *** </small>
    <small class="text-danger font-weight-bold" *ngIf="submitted && this.registerFormsControls['confirmpassword'].errors?.['mustmatch']" > *** Passwords do not match *** </small>

    <input class="form-control" type="password" name="" placeholder="password" formControlName="password">
  </div>

  <div class="form-group mt-4" style="width: 60%;">
    <label> Confirm Password: </label>
    
    <small class="text-danger font-weight-bold" *ngIf="submitted && this.registerFormsControls['confirmpassword'].errors?.['required']" > *** Confirm Password field is required *** </small>

    <small class="text-danger font-weight-bold" *ngIf="submitted && this.registerFormsControls['confirmpassword'].errors?.['mustmatch']" > *** Passwords do not match *** </small>

    <input class="form-control" type="password" name="" placeholder="confirm password" formControlName="confirmpassword" >
  </div>

  <div class="form-group" style="width: 60%;">
    <button type="submit" class="btn btn-dark">Register</button>
    <p class="mt-4 text-center bg-dark" id="changeToSignIn"> Already have an Account? <span class="text-danger btn font-weight-bold">Log in Here.</span> </p>
  </div>

</div>

  </form>

  <!-- <div class="sec" style="height: 10vh; width: 100%;"></div> -->
  </div>
















  <div class="hidden flex" id="signin" style="height: 100vh; justify-content: center; align-items: center;">

    <!-- <div class="sec" style="height: 10vh; width: 100%;"></div> -->

  <form [formGroup]="loginForms" (ngSubmit)="loginFormsOnSubmit()" class="bg-light" style=" background-image:  url(assets/bg.png); background-size: contain; background-color: white; background-repeat: no-repeat; background-position: center; height: inherit; width: 100%; ">

     <div style="background-color: #0080802e; margin: auto; width: 100vw !important; height: 100%; display: flex; justify-content: center; align-items: center; flex-direction: column;">

    <h1 class="my-3 font-weight-bold" style=" text-decoration: underline; " > Sign In </h1>

    <div *ngIf="errMsg" class="bg-danger text-center p-2 my-2 rounded" style="width: 60%;">
{{errMsg}}
  </div>

  <div *ngIf="sucMsg" class="bg-success text-center p-2 my-2 rounded" style="width: 60%;">
    {{sucMsg}}
      </div>

    <div class="form-group" style="width: 60%;">
      <label> Enter your email or password: </label>

      <small class="text-danger font-weight-bold" *ngIf="submitted && this.loginFormsControls['username'].errors?.['required']" > *** Username field is required *** </small>

    <input class="form-control" type="text" placeholder="username" formControlName="username">
  </div>

  <div class="form-group mt-4" style="width: 60%;">
    <label> Password: </label>

    <small class="text-danger font-weight-bold" *ngIf="submitted && this.loginFormsControls['password'].errors?.['required']" > *** Password field is required *** </small>

    <input class="form-control" type="password" placeholder="password" formControlName="password">
  </div>

  <div class="form-group" style="width: 60%;">
    <a href="" class="p-0 m-0 text-danger " style="display: block;" routerLink="../forgetPassword" > Forget Password? </a><br>
    <button type="submit" class="btn btn-dark">Sign in</button>

    <p class="mt-4 text-center bg-dark" id="changeToRegister"> New Here? <span class="text-danger btn font-weight-bold">Register Here.</span> </p>

  </div>

</div>

  </form>

  <!-- <div class="sec" style="height: 10vh; width: 100%;"></div> -->
  </div>


<!-- -->